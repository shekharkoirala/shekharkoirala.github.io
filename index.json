[{"content":"Introduction The post is a quick guide on \u0026ldquo;How we could use AWS lambda services to deploy some standalone task\u0026rdquo;. This is really helpful when we dont have to buy instances for such task. By using word task, I mean scripts, that could scrap data, or a cron job data aggregator. The BEST thing about the cron job is that , it is way cheaper. A million hits by lambda function is Free in AWS.\nThe following steps could lets you get going. In this example below, I am aggregating data in MongoDB and store the output in Redis.\nStep 1 function creating Create function : https://console.aws.amazon.com/lambda/home?region=us-east-1 One has to login to the AWS console and create a lambda function. Think Lambda function as a task that we want to do here.\nTo run a function , we need a script. Lets say : lambda_function.py The script wont run until it mets all its dependency. In Data Science world, pandas , numpy etc. We need to provide all the Dependency a script it requires.\nStep 2 Dependencies For managing the Dependencies : we could looked at the official Documentation. https://docs.aws.amazon.com/lambda/latest/dg/python-package.html In short: We want to dump all the dependencies in a folder.\n1 2 3  pip install --target ./package redis pip install --target ./package sentry_sdk pip install --target ./package motor   Yeah, I didnt include pandas, numpy and scipy. Because that is different case. The AWS lambda works in different version of linux which doesnt support the pypi installation of pandas and numpy. As those libraries extensibly use cython for optimization.\nTo use such Libraries, we will get to the new concept of Lmbda function ie : LAYERS\nstep 3: the code Make your code ready, especially the Beginning and the end. Most of the standard python use config.ini or .env file to get the variables value. Change that to os.environ.gte() function.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14  import motor.motor_asyncio import asyncio from datetime import datetime, timedelta import os import pandas as pd import sentry_sdk import redis import json class TrendingAggregator: def __init__(self): sentry_url = os.environ.get(\u0026#34;default\u0026#34;, \u0026#34;sentry_url\u0026#34;) sentry_env = os.environ.get(\u0026#34;default\u0026#34;, \u0026#34;sentry_env\u0026#34;)   Similarly, at the end of the code.\n1 2 3  def lambda_handler(event, context): trending = TrendingAggregator() trending.process()   You could change the function name lambda_handler and the filename lambda_function.py but it requires you to change the name in AWS lambda function console too. So, for sake of lazyness, lets stick to the default naming.\nStep 4: shipment Make the shipment ready.\n1 2 3 4 5  ~/my-function$ cd package ~/my-function/package$ zip -r9 ${OLDPWD}/function.zip . $ cd .. $ zip -g function.zip lambda_function.py   Here, what we did is , we zipped the packages [ dependencies ] and then add our script to the function.zip file.\nStep 5: layers ? You could see Function code, when you scroll down in the lambda dunction page in your AWS console , and Actions box, where one get options like upload a .zip file or upload a file from Amazon S3 Once you upload your zip file. You will see your code [ unless your code is more that 10 MB ]\nThere you could save and test the code. But since you need more complex dependencies You need to know little mroe about layers.\nStep 5 : yeah, the layers. Layers: If your code depends on AWS lambda function layers, you could do Three things to solve this. link to add layer to your lambda function https://console.aws.amazon.com/lambda/home?region=us-east-1#/add/layer?function=trending_aggregator Note: trending-aggregator is my function name.\nuse standard layer more info https://aws.amazon.com/blogs/aws/new-for-aws-lambda-use-any-programming-language-and-share-common-components/ its easy, its provided by AWS ( safe )\nOne could select Select from list of runtime compatible layers when they are in their layer page and see the AWS standard layer name. AWSLambda-Python6-SciPy1x\nuse someone else layer yeah, well, whatever you gonna do, someone had already done it may be 5 years ago. So, you could use their layer. Until you have their layer code. Luckily someone shares the detail in a stackoverfflow question. Cheers. more info https://stackoverflow.com/questions/36054976/pandas-aws-lambda One could select Provide a layer version ARN in their layer page. and add this arn code arn:aws:lambda:us-east-1:113088814899:layer:Klayers-python37-pandas:1 BOOM , Thanks Mate.\nuse your own layer Security Issues ?, To create our own layer , we need another AWS machine ( EC2). Login to another EC2 machine and follow these steps:\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  python --version Python 3.6.8 # https://docs.aws.amazon.com/lambda/latest/dg/lambda-runtimes.html # python 3.6 uses Amazon Linux currently  mkdir project cd project virtualenv v-env source ./v-env/bin/activate pip install pandas deactivate # creating layer # https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html#configuration-layers-path mkdir python cd python cp -r ../v-env/lib/python3.6/site-packages/* . cd .. zip -r panda_layer.zip python   This will create a zip file which include pandas , as installed natively in a weird AWS machine.\n1 2 3 4 5 6 7 8 9  ubuntu@ip:~/project$ cd ~/.aws/ ubuntu@ip:~/.aws$ ls config credentials credentials_prod ubuntu@ip:~/.aws$ cp credentials credentials_dev ubuntu@ip:~/.aws$ aws configure AWS Access Key ID [****************VF5Q]: *********AWS Id ************ AWS Secret Access Key [****************hco4]: *********AWS access key ************ Default region name [us-east-1]: Default output format [json]:   Here, we make our AWS credential compatible. Now we have a zip containing dependency and our AWS account is connected. As suggested by one stackoverflow answer.\n1 2  aws lambda publish-layer-version --layer-name pandas --zip-file fileb://panda_layer.zip --compatible-runtimes python3.6   But it didnt, so Our DevOps engineer finds a hack to deploy this as a layer. We first push the zip file to a S3 bucket and then publish the layer from there.\n1 2  aws s3 cp layer.zip s3://{{bucket_name}}/layer.zip aws lambda publish-layer-version --layer-name my-layer --description \u0026#34;My layer\u0026#34; --license-info \u0026#34;MIT\u0026#34; --content S3Bucket={{bucket-name}},S3Key=layer.zip --compatible-runtimes python3.6 python3.7 python3.8   yeah, owning one own layer is hard, But we already have two other alternatives.\nStep 6 RUNNNN Run, you could test the model, some database dependency like redis and mongodb should be abale to communicate with AWS lambda otherwise it wont work. But Once you do that, it will surely work and you will see the bueaty.\n1  REPORT RequestId: 5b9ce656-c38c-43c8-9187-515872598c61\tDuration: 3003.21 ms\tBilled Duration: 3000 ms\tMemory Size: 192 MB\tMax Memory Used: 142 MB\tInit Duration: 2202.47 ms\t  You will only get billed for the time you ran for. You could limit the resources, see Memory size and Max Memory used.\nI hope the stats are convincing enough to adopt Lambda function instead a buying bulky Instances.\n","permalink":"http://shekharkoirala.github.io/posts/lambda_function_python/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eThe post is a quick guide on \u0026ldquo;How we could use AWS lambda services to deploy some standalone task\u0026rdquo;. This is really helpful when we dont have to buy instances for such task. By using word task, I mean scripts, that could scrap data, or a cron job data aggregator. The BEST thing about the cron job is that , it is way cheaper. A million hits by lambda function is Free in AWS.\u003c/p\u003e","title":"AWS Lambda function for Data Scientist using Python."},{"content":"Introduction I want to create a Blog. But there are some conditions that I want:\n Easy/simple to create The UI should match my style. Based on Git, for future reference.  I chosed Hugo. because it is based on MarkDown.\nWhy MarkDown:  Markdown is simple to learn, with minimal extra characters, so itâ€™s also quicker to write content. Less chance of errors when writing in Markdown. Produces valid XHTML output. Keeps the content and the visual display separate, so you cannot mess up the look of your site. Write in any text editor or Markdown application you like. Markdown is a joy to use  Why Hugo: Hugo is created based on go. A respected and fast programming language. So, the technology stack is nice. beside that, it is based on Markdown. There are few alternatives of Hugo. Like pelican, based on Python: No hard feelings.\nI found a lots of prebuilt themes, which make the boring task easy.\nand you know what , when I know what hugo can do. I need\n proper code formatting in the blog proper user commenting in each posts google analytics animation stuff tags categories search  \u0026mdash;\u0026mdash; blah blah , and I dont need write any html and css. That\u0026rsquo;s awesome.\nInstallation Lets start the work.\n Install Hugo:  For other OS : Install Hugo\n1  brew install hugo   create space:  The naming of folder all yours\n1 2  hugo new site personalBlog cd personalBlog   Add Theme Luckily, hugo has huge collection of themes. Mine one is based on theme: loveit  1 2  git init git submodule add https://github.com/dillonzq/LoveIt.git themes/loveit   Add a new post  1  hugo new posts/my_post.md   yeah , its that easy.\nConfiguration To start the server. lets fix a-little default config.\nopen config.toml in one of the text editor and add this configs there.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49  baseURL = \u0026#34;http://example.org/\u0026#34; # [en, zh-cn, fr, ...] determines default content language defaultContentLanguage = \u0026#34;en\u0026#34; # language code languageCode = \u0026#34;en\u0026#34; title = \u0026#34;My New Hugo Site\u0026#34; # Change the default theme to be use when building the site with Hugo theme = \u0026#34;LoveIt\u0026#34; [params] # LoveIt theme version version = \u0026#34;0.2.X\u0026#34; [menu] [[menu.main]] identifier = \u0026#34;posts\u0026#34; # you can add extra information before the name (HTML format is supported), such as icons pre = \u0026#34;\u0026#34; # you can add extra information after the name (HTML format is supported), such as icons post = \u0026#34;\u0026#34; name = \u0026#34;Posts\u0026#34; url = \u0026#34;/posts/\u0026#34; # title will be shown when you hover on this menu link title = \u0026#34;\u0026#34; weight = 1 [[menu.main]] identifier = \u0026#34;tags\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Tags\u0026#34; url = \u0026#34;/tags/\u0026#34; title = \u0026#34;\u0026#34; weight = 2 [[menu.main]] identifier = \u0026#34;categories\u0026#34; pre = \u0026#34;\u0026#34; post = \u0026#34;\u0026#34; name = \u0026#34;Categories\u0026#34; url = \u0026#34;/categories/\u0026#34; title = \u0026#34;\u0026#34; weight = 3 # Markup related configuration in Hugo [markup] # Syntax Highlighting (https://gohugo.io/content-management/syntax-highlighting) [markup.highlight] # false is a necessary configuration (https://github.com/dillonzq/LoveIt/issues/158) noClasses = false   Now lets server the site , and check in localhost:1313\n1  hugo serve   Preview Does it look like this ? May be you ask where is the profile in the homepage ? In order to enable that\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29  # Home page config [params.home] # LoveIt NEW | 0.2.0 amount of RSS pages rss = 10 # Home page profile [params.home.profile] enable = true # Gravatar Email for preferred avatar in home page gravatarEmail = \u0026#34;\u0026#34; # URL of avatar shown in home page avatarURL = \u0026#34;/images/avatar.png\u0026#34; # LoveIt CHANGED | 0.2.7 title shown in home page (HTML format is supported) title = \u0026#34;\u0026#34; # subtitle shown in home page subtitle = \u0026#34;Personal Blog / Scribbles\u0026#34; # whether to use typeit animation for subtitle typeit = true # whether to show social links social = true # LoveIt NEW | 0.2.0 disclaimer (HTML format is supported) disclaimer = \u0026#34;\u0026#34; # Home page posts [params.home.posts] enable = true # special amount of posts in each home posts page paginate = 6 # LoveIt DELETED | 0.2.0 replaced with hiddenFromHomePage in params.page # default behavior when you don\u0026#39;t set \u0026#34;hiddenFromHomePage\u0026#34; in front matter defaultHiddenFromHomePage = false   More configs can be found here: site-configurations\nDeployment Now lets share what we have created here. But to do that we need to create static site from this markdown. Because only static site is get hosted on the github. No worries, all handled by Hugo.\nCreate a repo in the github based on your \u0026lt;username\u0026gt;/github.io and add it as submodule in the folder.\n1  git submodule add -b master https://github.com/\u0026lt;username\u0026gt;/\u0026lt;username\u0026gt;.github.io.git public   As, suggested by our mighty Hugo, create a deploy.sh file and it here.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #!/bin/sh  # If a command fails then the deploy stops set -e printf \u0026#34;\\033[0;32mDeploying updates to GitHub...\\033[0m\\n\u0026#34; # Build the project. hugo -t loveit # if using a theme, replace with `hugo -t \u0026lt;YOURTHEME\u0026gt;` # Go To Public folder cd public # Add changes to git. git add . # Commit changes. msg=\u0026#34;rebuilding site $(date)\u0026#34; if [ -n \u0026#34;$*\u0026#34; ]; then msg=\u0026#34;$*\u0026#34; fi git commit -m \u0026#34;$msg\u0026#34; # Push source and build repos. git push origin master   Basically, it generate static site push the code to github. make sure everything working.Now make the script executable.\n1  chmod +x deploy.sh   1  ./deploy.sh \u0026#34;Your optional commit message\u0026#34;   Done \u0026hellip; !!! checkthe site at \u0026lt;username\u0026gt;.github.io\nFuture We have created a site , but we are not satisfied yet. yeah i know.\n google analytics : Done   Facebook Comments : Done Agolia Search : Done Add Jupyter notebooks in the blog. Using custom domain for the site.  I will look into this topic pretty soon and update in the post.\nReferences Hugo  Install Hugo Quickstart Hugo Host Hugo in github Proper summaries of Blog Hugo themes  loveit  main site Loveit loveit Docs Real world inpiring Example: loveit  markdown  markdown syntax  Add comments to support this Blog.\n","permalink":"http://shekharkoirala.github.io/posts/first_post/","summary":"\u003ch2 id=\"introduction\"\u003eIntroduction\u003c/h2\u003e\n\u003cp\u003eI want to create a Blog. But there are some conditions that I want:\u003c/p\u003e\n\u003col\u003e\n\u003cli\u003eEasy/simple to create\u003c/li\u003e\n\u003cli\u003eThe UI should match my style.\u003c/li\u003e\n\u003cli\u003eBased on Git, for future reference.\u003c/li\u003e\n\u003c/ol\u003e","title":"Create your own Blog Post"},{"content":"Work Machine Learning Engineer : Identv\nEducation Electronics and Communication Engineer - IOE, Thapathali Campus\n","permalink":"http://shekharkoirala.github.io/about/","summary":"Work Machine Learning Engineer : Identv\nEducation Electronics and Communication Engineer - IOE, Thapathali Campus","title":"shekhar koirala"}]